/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { DEPHY_REWARDS_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const INITIALIZE_REWARDS_STATE_DISCRIMINATOR = new Uint8Array([
  185, 222, 190, 230, 192, 41, 93, 51,
]);

export function getInitializeRewardsStateDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_REWARDS_STATE_DISCRIMINATOR
  );
}

export type InitializeRewardsStateInstruction<
  TProgram extends string = typeof DEPHY_REWARDS_PROGRAM_ADDRESS,
  TAccountRewardsState extends string | IAccountMeta<string> = string,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountRewardsVault extends string | IAccountMeta<string> = string,
  TAccountRewardsMint extends string | IAccountMeta<string> = string,
  TAccountRewardsTokenAccount extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountRewardsTokenProgram extends string | IAccountMeta<string> = string,
  TAccountAssociatedTokenProgram extends
    | string
    | IAccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountRewardsState extends string
        ? WritableSignerAccount<TAccountRewardsState> &
            IAccountSignerMeta<TAccountRewardsState>
        : TAccountRewardsState,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountRewardsVault extends string
        ? ReadonlyAccount<TAccountRewardsVault>
        : TAccountRewardsVault,
      TAccountRewardsMint extends string
        ? ReadonlyAccount<TAccountRewardsMint>
        : TAccountRewardsMint,
      TAccountRewardsTokenAccount extends string
        ? WritableAccount<TAccountRewardsTokenAccount>
        : TAccountRewardsTokenAccount,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountRewardsTokenProgram extends string
        ? ReadonlyAccount<TAccountRewardsTokenProgram>
        : TAccountRewardsTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeRewardsStateInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type InitializeRewardsStateInstructionDataArgs = {};

export function getInitializeRewardsStateInstructionDataEncoder(): Encoder<InitializeRewardsStateInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: INITIALIZE_REWARDS_STATE_DISCRIMINATOR,
    })
  );
}

export function getInitializeRewardsStateInstructionDataDecoder(): Decoder<InitializeRewardsStateInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getInitializeRewardsStateInstructionDataCodec(): Codec<
  InitializeRewardsStateInstructionDataArgs,
  InitializeRewardsStateInstructionData
> {
  return combineCodec(
    getInitializeRewardsStateInstructionDataEncoder(),
    getInitializeRewardsStateInstructionDataDecoder()
  );
}

export type InitializeRewardsStateAsyncInput<
  TAccountRewardsState extends string = string,
  TAccountAuthority extends string = string,
  TAccountRewardsVault extends string = string,
  TAccountRewardsMint extends string = string,
  TAccountRewardsTokenAccount extends string = string,
  TAccountPayer extends string = string,
  TAccountRewardsTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  rewardsState: TransactionSigner<TAccountRewardsState>;
  authority: TransactionSigner<TAccountAuthority>;
  rewardsVault?: Address<TAccountRewardsVault>;
  rewardsMint: Address<TAccountRewardsMint>;
  rewardsTokenAccount?: Address<TAccountRewardsTokenAccount>;
  payer: TransactionSigner<TAccountPayer>;
  rewardsTokenProgram: Address<TAccountRewardsTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export async function getInitializeRewardsStateInstructionAsync<
  TAccountRewardsState extends string,
  TAccountAuthority extends string,
  TAccountRewardsVault extends string,
  TAccountRewardsMint extends string,
  TAccountRewardsTokenAccount extends string,
  TAccountPayer extends string,
  TAccountRewardsTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof DEPHY_REWARDS_PROGRAM_ADDRESS,
>(
  input: InitializeRewardsStateAsyncInput<
    TAccountRewardsState,
    TAccountAuthority,
    TAccountRewardsVault,
    TAccountRewardsMint,
    TAccountRewardsTokenAccount,
    TAccountPayer,
    TAccountRewardsTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitializeRewardsStateInstruction<
    TProgramAddress,
    TAccountRewardsState,
    TAccountAuthority,
    TAccountRewardsVault,
    TAccountRewardsMint,
    TAccountRewardsTokenAccount,
    TAccountPayer,
    TAccountRewardsTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? DEPHY_REWARDS_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    rewardsState: { value: input.rewardsState ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    rewardsVault: { value: input.rewardsVault ?? null, isWritable: false },
    rewardsMint: { value: input.rewardsMint ?? null, isWritable: false },
    rewardsTokenAccount: {
      value: input.rewardsTokenAccount ?? null,
      isWritable: true,
    },
    payer: { value: input.payer ?? null, isWritable: true },
    rewardsTokenProgram: {
      value: input.rewardsTokenProgram ?? null,
      isWritable: false,
    },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.rewardsVault.value) {
    accounts.rewardsVault.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            114, 101, 119, 97, 114, 100, 115, 95, 118, 97, 117, 108, 116,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.rewardsState.value)),
      ],
    });
  }
  if (!accounts.rewardsTokenAccount.value) {
    accounts.rewardsTokenAccount.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.rewardsVault.value)),
        getAddressEncoder().encode(
          expectAddress(accounts.rewardsTokenProgram.value)
        ),
        getAddressEncoder().encode(expectAddress(accounts.rewardsMint.value)),
      ],
    });
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.rewardsState),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.rewardsVault),
      getAccountMeta(accounts.rewardsMint),
      getAccountMeta(accounts.rewardsTokenAccount),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.rewardsTokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeRewardsStateInstructionDataEncoder().encode({}),
  } as InitializeRewardsStateInstruction<
    TProgramAddress,
    TAccountRewardsState,
    TAccountAuthority,
    TAccountRewardsVault,
    TAccountRewardsMint,
    TAccountRewardsTokenAccount,
    TAccountPayer,
    TAccountRewardsTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type InitializeRewardsStateInput<
  TAccountRewardsState extends string = string,
  TAccountAuthority extends string = string,
  TAccountRewardsVault extends string = string,
  TAccountRewardsMint extends string = string,
  TAccountRewardsTokenAccount extends string = string,
  TAccountPayer extends string = string,
  TAccountRewardsTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  rewardsState: TransactionSigner<TAccountRewardsState>;
  authority: TransactionSigner<TAccountAuthority>;
  rewardsVault: Address<TAccountRewardsVault>;
  rewardsMint: Address<TAccountRewardsMint>;
  rewardsTokenAccount: Address<TAccountRewardsTokenAccount>;
  payer: TransactionSigner<TAccountPayer>;
  rewardsTokenProgram: Address<TAccountRewardsTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getInitializeRewardsStateInstruction<
  TAccountRewardsState extends string,
  TAccountAuthority extends string,
  TAccountRewardsVault extends string,
  TAccountRewardsMint extends string,
  TAccountRewardsTokenAccount extends string,
  TAccountPayer extends string,
  TAccountRewardsTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof DEPHY_REWARDS_PROGRAM_ADDRESS,
>(
  input: InitializeRewardsStateInput<
    TAccountRewardsState,
    TAccountAuthority,
    TAccountRewardsVault,
    TAccountRewardsMint,
    TAccountRewardsTokenAccount,
    TAccountPayer,
    TAccountRewardsTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeRewardsStateInstruction<
  TProgramAddress,
  TAccountRewardsState,
  TAccountAuthority,
  TAccountRewardsVault,
  TAccountRewardsMint,
  TAccountRewardsTokenAccount,
  TAccountPayer,
  TAccountRewardsTokenProgram,
  TAccountAssociatedTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? DEPHY_REWARDS_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    rewardsState: { value: input.rewardsState ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    rewardsVault: { value: input.rewardsVault ?? null, isWritable: false },
    rewardsMint: { value: input.rewardsMint ?? null, isWritable: false },
    rewardsTokenAccount: {
      value: input.rewardsTokenAccount ?? null,
      isWritable: true,
    },
    payer: { value: input.payer ?? null, isWritable: true },
    rewardsTokenProgram: {
      value: input.rewardsTokenProgram ?? null,
      isWritable: false,
    },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.rewardsState),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.rewardsVault),
      getAccountMeta(accounts.rewardsMint),
      getAccountMeta(accounts.rewardsTokenAccount),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.rewardsTokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeRewardsStateInstructionDataEncoder().encode({}),
  } as InitializeRewardsStateInstruction<
    TProgramAddress,
    TAccountRewardsState,
    TAccountAuthority,
    TAccountRewardsVault,
    TAccountRewardsMint,
    TAccountRewardsTokenAccount,
    TAccountPayer,
    TAccountRewardsTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedInitializeRewardsStateInstruction<
  TProgram extends string = typeof DEPHY_REWARDS_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    rewardsState: TAccountMetas[0];
    authority: TAccountMetas[1];
    rewardsVault: TAccountMetas[2];
    rewardsMint: TAccountMetas[3];
    rewardsTokenAccount: TAccountMetas[4];
    payer: TAccountMetas[5];
    rewardsTokenProgram: TAccountMetas[6];
    associatedTokenProgram: TAccountMetas[7];
    systemProgram: TAccountMetas[8];
  };
  data: InitializeRewardsStateInstructionData;
};

export function parseInitializeRewardsStateInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedInitializeRewardsStateInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      rewardsState: getNextAccount(),
      authority: getNextAccount(),
      rewardsVault: getNextAccount(),
      rewardsMint: getNextAccount(),
      rewardsTokenAccount: getNextAccount(),
      payer: getNextAccount(),
      rewardsTokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeRewardsStateInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
