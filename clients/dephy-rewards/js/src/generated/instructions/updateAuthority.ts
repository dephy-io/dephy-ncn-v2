/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { DEPHY_REWARDS_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const UPDATE_AUTHORITY_DISCRIMINATOR = new Uint8Array([
  32, 46, 64, 28, 149, 75, 243, 88,
]);

export function getUpdateAuthorityDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    UPDATE_AUTHORITY_DISCRIMINATOR
  );
}

export type UpdateAuthorityInstruction<
  TProgram extends string = typeof DEPHY_REWARDS_PROGRAM_ADDRESS,
  TAccountGlobalConfig extends string | IAccountMeta<string> = string,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountRewardsState extends string | IAccountMeta<string> = string,
  TAccountNewAuthority extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountGlobalConfig extends string
        ? ReadonlyAccount<TAccountGlobalConfig>
        : TAccountGlobalConfig,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountRewardsState extends string
        ? WritableAccount<TAccountRewardsState>
        : TAccountRewardsState,
      TAccountNewAuthority extends string
        ? ReadonlyAccount<TAccountNewAuthority>
        : TAccountNewAuthority,
      ...TRemainingAccounts,
    ]
  >;

export type UpdateAuthorityInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type UpdateAuthorityInstructionDataArgs = {};

export function getUpdateAuthorityInstructionDataEncoder(): Encoder<UpdateAuthorityInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: UPDATE_AUTHORITY_DISCRIMINATOR })
  );
}

export function getUpdateAuthorityInstructionDataDecoder(): Decoder<UpdateAuthorityInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getUpdateAuthorityInstructionDataCodec(): Codec<
  UpdateAuthorityInstructionDataArgs,
  UpdateAuthorityInstructionData
> {
  return combineCodec(
    getUpdateAuthorityInstructionDataEncoder(),
    getUpdateAuthorityInstructionDataDecoder()
  );
}

export type UpdateAuthorityAsyncInput<
  TAccountGlobalConfig extends string = string,
  TAccountAuthority extends string = string,
  TAccountRewardsState extends string = string,
  TAccountNewAuthority extends string = string,
> = {
  globalConfig?: Address<TAccountGlobalConfig>;
  authority: TransactionSigner<TAccountAuthority>;
  rewardsState: Address<TAccountRewardsState>;
  newAuthority: Address<TAccountNewAuthority>;
};

export async function getUpdateAuthorityInstructionAsync<
  TAccountGlobalConfig extends string,
  TAccountAuthority extends string,
  TAccountRewardsState extends string,
  TAccountNewAuthority extends string,
  TProgramAddress extends Address = typeof DEPHY_REWARDS_PROGRAM_ADDRESS,
>(
  input: UpdateAuthorityAsyncInput<
    TAccountGlobalConfig,
    TAccountAuthority,
    TAccountRewardsState,
    TAccountNewAuthority
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  UpdateAuthorityInstruction<
    TProgramAddress,
    TAccountGlobalConfig,
    TAccountAuthority,
    TAccountRewardsState,
    TAccountNewAuthority
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? DEPHY_REWARDS_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    globalConfig: { value: input.globalConfig ?? null, isWritable: false },
    authority: { value: input.authority ?? null, isWritable: false },
    rewardsState: { value: input.rewardsState ?? null, isWritable: true },
    newAuthority: { value: input.newAuthority ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.globalConfig.value) {
    accounts.globalConfig.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            103, 108, 111, 98, 97, 108, 95, 99, 111, 110, 102, 105, 103,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.globalConfig),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.rewardsState),
      getAccountMeta(accounts.newAuthority),
    ],
    programAddress,
    data: getUpdateAuthorityInstructionDataEncoder().encode({}),
  } as UpdateAuthorityInstruction<
    TProgramAddress,
    TAccountGlobalConfig,
    TAccountAuthority,
    TAccountRewardsState,
    TAccountNewAuthority
  >;

  return instruction;
}

export type UpdateAuthorityInput<
  TAccountGlobalConfig extends string = string,
  TAccountAuthority extends string = string,
  TAccountRewardsState extends string = string,
  TAccountNewAuthority extends string = string,
> = {
  globalConfig: Address<TAccountGlobalConfig>;
  authority: TransactionSigner<TAccountAuthority>;
  rewardsState: Address<TAccountRewardsState>;
  newAuthority: Address<TAccountNewAuthority>;
};

export function getUpdateAuthorityInstruction<
  TAccountGlobalConfig extends string,
  TAccountAuthority extends string,
  TAccountRewardsState extends string,
  TAccountNewAuthority extends string,
  TProgramAddress extends Address = typeof DEPHY_REWARDS_PROGRAM_ADDRESS,
>(
  input: UpdateAuthorityInput<
    TAccountGlobalConfig,
    TAccountAuthority,
    TAccountRewardsState,
    TAccountNewAuthority
  >,
  config?: { programAddress?: TProgramAddress }
): UpdateAuthorityInstruction<
  TProgramAddress,
  TAccountGlobalConfig,
  TAccountAuthority,
  TAccountRewardsState,
  TAccountNewAuthority
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? DEPHY_REWARDS_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    globalConfig: { value: input.globalConfig ?? null, isWritable: false },
    authority: { value: input.authority ?? null, isWritable: false },
    rewardsState: { value: input.rewardsState ?? null, isWritable: true },
    newAuthority: { value: input.newAuthority ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.globalConfig),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.rewardsState),
      getAccountMeta(accounts.newAuthority),
    ],
    programAddress,
    data: getUpdateAuthorityInstructionDataEncoder().encode({}),
  } as UpdateAuthorityInstruction<
    TProgramAddress,
    TAccountGlobalConfig,
    TAccountAuthority,
    TAccountRewardsState,
    TAccountNewAuthority
  >;

  return instruction;
}

export type ParsedUpdateAuthorityInstruction<
  TProgram extends string = typeof DEPHY_REWARDS_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    globalConfig: TAccountMetas[0];
    authority: TAccountMetas[1];
    rewardsState: TAccountMetas[2];
    newAuthority: TAccountMetas[3];
  };
  data: UpdateAuthorityInstructionData;
};

export function parseUpdateAuthorityInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedUpdateAuthorityInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      globalConfig: getNextAccount(),
      authority: getNextAccount(),
      rewardsState: getNextAccount(),
      newAuthority: getNextAccount(),
    },
    data: getUpdateAuthorityInstructionDataDecoder().decode(instruction.data),
  };
}
