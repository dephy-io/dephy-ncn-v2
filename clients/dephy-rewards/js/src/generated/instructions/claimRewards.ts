/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { DEPHY_REWARDS_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CLAIM_REWARDS_DISCRIMINATOR = new Uint8Array([
  4, 144, 132, 71, 116, 23, 151, 80,
]);

export function getClaimRewardsDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CLAIM_REWARDS_DISCRIMINATOR
  );
}

export type ClaimRewardsInstruction<
  TProgram extends string = typeof DEPHY_REWARDS_PROGRAM_ADDRESS,
  TAccountRewardsState extends string | IAccountMeta<string> = string,
  TAccountRewardsVault extends string | IAccountMeta<string> = string,
  TAccountRewardsMint extends string | IAccountMeta<string> = string,
  TAccountRewardsTokenAccount extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountClaimState extends string | IAccountMeta<string> = string,
  TAccountBeneficiaryTokenAccount extends
    | string
    | IAccountMeta<string> = string,
  TAccountMaybeMerkleRootAccount extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountRewardsTokenProgram extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountRewardsState extends string
        ? ReadonlyAccount<TAccountRewardsState>
        : TAccountRewardsState,
      TAccountRewardsVault extends string
        ? ReadonlyAccount<TAccountRewardsVault>
        : TAccountRewardsVault,
      TAccountRewardsMint extends string
        ? ReadonlyAccount<TAccountRewardsMint>
        : TAccountRewardsMint,
      TAccountRewardsTokenAccount extends string
        ? WritableAccount<TAccountRewardsTokenAccount>
        : TAccountRewardsTokenAccount,
      TAccountOwner extends string
        ? ReadonlySignerAccount<TAccountOwner> &
            IAccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountClaimState extends string
        ? WritableAccount<TAccountClaimState>
        : TAccountClaimState,
      TAccountBeneficiaryTokenAccount extends string
        ? WritableAccount<TAccountBeneficiaryTokenAccount>
        : TAccountBeneficiaryTokenAccount,
      TAccountMaybeMerkleRootAccount extends string
        ? ReadonlyAccount<TAccountMaybeMerkleRootAccount>
        : TAccountMaybeMerkleRootAccount,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountRewardsTokenProgram extends string
        ? ReadonlyAccount<TAccountRewardsTokenProgram>
        : TAccountRewardsTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ClaimRewardsInstructionData = {
  discriminator: ReadonlyUint8Array;
  index: number;
  totalRewards: bigint;
  proof: Array<ReadonlyUint8Array>;
};

export type ClaimRewardsInstructionDataArgs = {
  index: number;
  totalRewards: number | bigint;
  proof: Array<ReadonlyUint8Array>;
};

export function getClaimRewardsInstructionDataEncoder(): Encoder<ClaimRewardsInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['index', getU32Encoder()],
      ['totalRewards', getU64Encoder()],
      ['proof', getArrayEncoder(fixEncoderSize(getBytesEncoder(), 32))],
    ]),
    (value) => ({ ...value, discriminator: CLAIM_REWARDS_DISCRIMINATOR })
  );
}

export function getClaimRewardsInstructionDataDecoder(): Decoder<ClaimRewardsInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['index', getU32Decoder()],
    ['totalRewards', getU64Decoder()],
    ['proof', getArrayDecoder(fixDecoderSize(getBytesDecoder(), 32))],
  ]);
}

export function getClaimRewardsInstructionDataCodec(): Codec<
  ClaimRewardsInstructionDataArgs,
  ClaimRewardsInstructionData
> {
  return combineCodec(
    getClaimRewardsInstructionDataEncoder(),
    getClaimRewardsInstructionDataDecoder()
  );
}

export type ClaimRewardsAsyncInput<
  TAccountRewardsState extends string = string,
  TAccountRewardsVault extends string = string,
  TAccountRewardsMint extends string = string,
  TAccountRewardsTokenAccount extends string = string,
  TAccountOwner extends string = string,
  TAccountClaimState extends string = string,
  TAccountBeneficiaryTokenAccount extends string = string,
  TAccountMaybeMerkleRootAccount extends string = string,
  TAccountPayer extends string = string,
  TAccountRewardsTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  rewardsState: Address<TAccountRewardsState>;
  rewardsVault?: Address<TAccountRewardsVault>;
  rewardsMint: Address<TAccountRewardsMint>;
  rewardsTokenAccount: Address<TAccountRewardsTokenAccount>;
  owner: TransactionSigner<TAccountOwner>;
  claimState?: Address<TAccountClaimState>;
  beneficiaryTokenAccount: Address<TAccountBeneficiaryTokenAccount>;
  maybeMerkleRootAccount?: Address<TAccountMaybeMerkleRootAccount>;
  payer: TransactionSigner<TAccountPayer>;
  rewardsTokenProgram: Address<TAccountRewardsTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  index: ClaimRewardsInstructionDataArgs['index'];
  totalRewards: ClaimRewardsInstructionDataArgs['totalRewards'];
  proof: ClaimRewardsInstructionDataArgs['proof'];
};

export async function getClaimRewardsInstructionAsync<
  TAccountRewardsState extends string,
  TAccountRewardsVault extends string,
  TAccountRewardsMint extends string,
  TAccountRewardsTokenAccount extends string,
  TAccountOwner extends string,
  TAccountClaimState extends string,
  TAccountBeneficiaryTokenAccount extends string,
  TAccountMaybeMerkleRootAccount extends string,
  TAccountPayer extends string,
  TAccountRewardsTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof DEPHY_REWARDS_PROGRAM_ADDRESS,
>(
  input: ClaimRewardsAsyncInput<
    TAccountRewardsState,
    TAccountRewardsVault,
    TAccountRewardsMint,
    TAccountRewardsTokenAccount,
    TAccountOwner,
    TAccountClaimState,
    TAccountBeneficiaryTokenAccount,
    TAccountMaybeMerkleRootAccount,
    TAccountPayer,
    TAccountRewardsTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  ClaimRewardsInstruction<
    TProgramAddress,
    TAccountRewardsState,
    TAccountRewardsVault,
    TAccountRewardsMint,
    TAccountRewardsTokenAccount,
    TAccountOwner,
    TAccountClaimState,
    TAccountBeneficiaryTokenAccount,
    TAccountMaybeMerkleRootAccount,
    TAccountPayer,
    TAccountRewardsTokenProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? DEPHY_REWARDS_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    rewardsState: { value: input.rewardsState ?? null, isWritable: false },
    rewardsVault: { value: input.rewardsVault ?? null, isWritable: false },
    rewardsMint: { value: input.rewardsMint ?? null, isWritable: false },
    rewardsTokenAccount: {
      value: input.rewardsTokenAccount ?? null,
      isWritable: true,
    },
    owner: { value: input.owner ?? null, isWritable: false },
    claimState: { value: input.claimState ?? null, isWritable: true },
    beneficiaryTokenAccount: {
      value: input.beneficiaryTokenAccount ?? null,
      isWritable: true,
    },
    maybeMerkleRootAccount: {
      value: input.maybeMerkleRootAccount ?? null,
      isWritable: false,
    },
    payer: { value: input.payer ?? null, isWritable: true },
    rewardsTokenProgram: {
      value: input.rewardsTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.rewardsVault.value) {
    accounts.rewardsVault.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            114, 101, 119, 97, 114, 100, 115, 95, 118, 97, 117, 108, 116,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.rewardsState.value)),
      ],
    });
  }
  if (!accounts.claimState.value) {
    accounts.claimState.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([99, 108, 97, 105, 109, 95, 115, 116, 97, 116, 101])
        ),
        getAddressEncoder().encode(expectAddress(accounts.rewardsState.value)),
        getAddressEncoder().encode(expectAddress(accounts.owner.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.rewardsState),
      getAccountMeta(accounts.rewardsVault),
      getAccountMeta(accounts.rewardsMint),
      getAccountMeta(accounts.rewardsTokenAccount),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.claimState),
      getAccountMeta(accounts.beneficiaryTokenAccount),
      getAccountMeta(accounts.maybeMerkleRootAccount),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.rewardsTokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getClaimRewardsInstructionDataEncoder().encode(
      args as ClaimRewardsInstructionDataArgs
    ),
  } as ClaimRewardsInstruction<
    TProgramAddress,
    TAccountRewardsState,
    TAccountRewardsVault,
    TAccountRewardsMint,
    TAccountRewardsTokenAccount,
    TAccountOwner,
    TAccountClaimState,
    TAccountBeneficiaryTokenAccount,
    TAccountMaybeMerkleRootAccount,
    TAccountPayer,
    TAccountRewardsTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ClaimRewardsInput<
  TAccountRewardsState extends string = string,
  TAccountRewardsVault extends string = string,
  TAccountRewardsMint extends string = string,
  TAccountRewardsTokenAccount extends string = string,
  TAccountOwner extends string = string,
  TAccountClaimState extends string = string,
  TAccountBeneficiaryTokenAccount extends string = string,
  TAccountMaybeMerkleRootAccount extends string = string,
  TAccountPayer extends string = string,
  TAccountRewardsTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  rewardsState: Address<TAccountRewardsState>;
  rewardsVault: Address<TAccountRewardsVault>;
  rewardsMint: Address<TAccountRewardsMint>;
  rewardsTokenAccount: Address<TAccountRewardsTokenAccount>;
  owner: TransactionSigner<TAccountOwner>;
  claimState: Address<TAccountClaimState>;
  beneficiaryTokenAccount: Address<TAccountBeneficiaryTokenAccount>;
  maybeMerkleRootAccount?: Address<TAccountMaybeMerkleRootAccount>;
  payer: TransactionSigner<TAccountPayer>;
  rewardsTokenProgram: Address<TAccountRewardsTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  index: ClaimRewardsInstructionDataArgs['index'];
  totalRewards: ClaimRewardsInstructionDataArgs['totalRewards'];
  proof: ClaimRewardsInstructionDataArgs['proof'];
};

export function getClaimRewardsInstruction<
  TAccountRewardsState extends string,
  TAccountRewardsVault extends string,
  TAccountRewardsMint extends string,
  TAccountRewardsTokenAccount extends string,
  TAccountOwner extends string,
  TAccountClaimState extends string,
  TAccountBeneficiaryTokenAccount extends string,
  TAccountMaybeMerkleRootAccount extends string,
  TAccountPayer extends string,
  TAccountRewardsTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof DEPHY_REWARDS_PROGRAM_ADDRESS,
>(
  input: ClaimRewardsInput<
    TAccountRewardsState,
    TAccountRewardsVault,
    TAccountRewardsMint,
    TAccountRewardsTokenAccount,
    TAccountOwner,
    TAccountClaimState,
    TAccountBeneficiaryTokenAccount,
    TAccountMaybeMerkleRootAccount,
    TAccountPayer,
    TAccountRewardsTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ClaimRewardsInstruction<
  TProgramAddress,
  TAccountRewardsState,
  TAccountRewardsVault,
  TAccountRewardsMint,
  TAccountRewardsTokenAccount,
  TAccountOwner,
  TAccountClaimState,
  TAccountBeneficiaryTokenAccount,
  TAccountMaybeMerkleRootAccount,
  TAccountPayer,
  TAccountRewardsTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? DEPHY_REWARDS_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    rewardsState: { value: input.rewardsState ?? null, isWritable: false },
    rewardsVault: { value: input.rewardsVault ?? null, isWritable: false },
    rewardsMint: { value: input.rewardsMint ?? null, isWritable: false },
    rewardsTokenAccount: {
      value: input.rewardsTokenAccount ?? null,
      isWritable: true,
    },
    owner: { value: input.owner ?? null, isWritable: false },
    claimState: { value: input.claimState ?? null, isWritable: true },
    beneficiaryTokenAccount: {
      value: input.beneficiaryTokenAccount ?? null,
      isWritable: true,
    },
    maybeMerkleRootAccount: {
      value: input.maybeMerkleRootAccount ?? null,
      isWritable: false,
    },
    payer: { value: input.payer ?? null, isWritable: true },
    rewardsTokenProgram: {
      value: input.rewardsTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.rewardsState),
      getAccountMeta(accounts.rewardsVault),
      getAccountMeta(accounts.rewardsMint),
      getAccountMeta(accounts.rewardsTokenAccount),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.claimState),
      getAccountMeta(accounts.beneficiaryTokenAccount),
      getAccountMeta(accounts.maybeMerkleRootAccount),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.rewardsTokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getClaimRewardsInstructionDataEncoder().encode(
      args as ClaimRewardsInstructionDataArgs
    ),
  } as ClaimRewardsInstruction<
    TProgramAddress,
    TAccountRewardsState,
    TAccountRewardsVault,
    TAccountRewardsMint,
    TAccountRewardsTokenAccount,
    TAccountOwner,
    TAccountClaimState,
    TAccountBeneficiaryTokenAccount,
    TAccountMaybeMerkleRootAccount,
    TAccountPayer,
    TAccountRewardsTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedClaimRewardsInstruction<
  TProgram extends string = typeof DEPHY_REWARDS_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    rewardsState: TAccountMetas[0];
    rewardsVault: TAccountMetas[1];
    rewardsMint: TAccountMetas[2];
    rewardsTokenAccount: TAccountMetas[3];
    owner: TAccountMetas[4];
    claimState: TAccountMetas[5];
    beneficiaryTokenAccount: TAccountMetas[6];
    maybeMerkleRootAccount?: TAccountMetas[7] | undefined;
    payer: TAccountMetas[8];
    rewardsTokenProgram: TAccountMetas[9];
    systemProgram: TAccountMetas[10];
  };
  data: ClaimRewardsInstructionData;
};

export function parseClaimRewardsInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedClaimRewardsInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 11) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === DEPHY_REWARDS_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      rewardsState: getNextAccount(),
      rewardsVault: getNextAccount(),
      rewardsMint: getNextAccount(),
      rewardsTokenAccount: getNextAccount(),
      owner: getNextAccount(),
      claimState: getNextAccount(),
      beneficiaryTokenAccount: getNextAccount(),
      maybeMerkleRootAccount: getNextOptionalAccount(),
      payer: getNextAccount(),
      rewardsTokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getClaimRewardsInstructionDataDecoder().decode(instruction.data),
  };
}
