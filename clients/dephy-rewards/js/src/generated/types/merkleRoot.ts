/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getDiscriminatedUnionDecoder,
  getDiscriminatedUnionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type GetDiscriminatedUnionVariant,
  type GetDiscriminatedUnionVariantContent,
  type ReadonlyUint8Array,
} from '@solana/kit';

export type MerkleRoot =
  | { __kind: 'Inplace'; hash: ReadonlyUint8Array }
  | { __kind: 'External'; pubkey: Address; offset: bigint };

export type MerkleRootArgs =
  | { __kind: 'Inplace'; hash: ReadonlyUint8Array }
  | { __kind: 'External'; pubkey: Address; offset: number | bigint };

export function getMerkleRootEncoder(): Encoder<MerkleRootArgs> {
  return getDiscriminatedUnionEncoder([
    [
      'Inplace',
      getStructEncoder([['hash', fixEncoderSize(getBytesEncoder(), 32)]]),
    ],
    [
      'External',
      getStructEncoder([
        ['pubkey', getAddressEncoder()],
        ['offset', getU64Encoder()],
      ]),
    ],
  ]);
}

export function getMerkleRootDecoder(): Decoder<MerkleRoot> {
  return getDiscriminatedUnionDecoder([
    [
      'Inplace',
      getStructDecoder([['hash', fixDecoderSize(getBytesDecoder(), 32)]]),
    ],
    [
      'External',
      getStructDecoder([
        ['pubkey', getAddressDecoder()],
        ['offset', getU64Decoder()],
      ]),
    ],
  ]);
}

export function getMerkleRootCodec(): Codec<MerkleRootArgs, MerkleRoot> {
  return combineCodec(getMerkleRootEncoder(), getMerkleRootDecoder());
}

// Data Enum Helpers.
export function merkleRoot(
  kind: 'Inplace',
  data: GetDiscriminatedUnionVariantContent<MerkleRootArgs, '__kind', 'Inplace'>
): GetDiscriminatedUnionVariant<MerkleRootArgs, '__kind', 'Inplace'>;
export function merkleRoot(
  kind: 'External',
  data: GetDiscriminatedUnionVariantContent<
    MerkleRootArgs,
    '__kind',
    'External'
  >
): GetDiscriminatedUnionVariant<MerkleRootArgs, '__kind', 'External'>;
export function merkleRoot<K extends MerkleRootArgs['__kind'], Data>(
  kind: K,
  data?: Data
) {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isMerkleRoot<K extends MerkleRoot['__kind']>(
  kind: K,
  value: MerkleRoot
): value is MerkleRoot & { __kind: K } {
  return value.__kind === kind;
}
