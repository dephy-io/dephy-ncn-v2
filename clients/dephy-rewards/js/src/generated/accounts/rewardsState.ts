/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getMerkleRootDecoder,
  getMerkleRootEncoder,
  type MerkleRoot,
  type MerkleRootArgs,
} from '../types';

export const REWARDS_STATE_DISCRIMINATOR = new Uint8Array([
  155, 23, 165, 17, 31, 127, 88, 135,
]);

export function getRewardsStateDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REWARDS_STATE_DISCRIMINATOR
  );
}

export type RewardsState = {
  discriminator: ReadonlyUint8Array;
  authority: Address;
  rewardsMint: Address;
  rewardsTokenAccount: Address;
  merkleRoot: MerkleRoot;
};

export type RewardsStateArgs = {
  authority: Address;
  rewardsMint: Address;
  rewardsTokenAccount: Address;
  merkleRoot: MerkleRootArgs;
};

export function getRewardsStateEncoder(): Encoder<RewardsStateArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['authority', getAddressEncoder()],
      ['rewardsMint', getAddressEncoder()],
      ['rewardsTokenAccount', getAddressEncoder()],
      ['merkleRoot', getMerkleRootEncoder()],
    ]),
    (value) => ({ ...value, discriminator: REWARDS_STATE_DISCRIMINATOR })
  );
}

export function getRewardsStateDecoder(): Decoder<RewardsState> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['authority', getAddressDecoder()],
    ['rewardsMint', getAddressDecoder()],
    ['rewardsTokenAccount', getAddressDecoder()],
    ['merkleRoot', getMerkleRootDecoder()],
  ]);
}

export function getRewardsStateCodec(): Codec<RewardsStateArgs, RewardsState> {
  return combineCodec(getRewardsStateEncoder(), getRewardsStateDecoder());
}

export function decodeRewardsState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<RewardsState, TAddress>;
export function decodeRewardsState<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<RewardsState, TAddress>;
export function decodeRewardsState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<RewardsState, TAddress> | MaybeAccount<RewardsState, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getRewardsStateDecoder()
  );
}

export async function fetchRewardsState<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<RewardsState, TAddress>> {
  const maybeAccount = await fetchMaybeRewardsState(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeRewardsState<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<RewardsState, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeRewardsState(maybeAccount);
}

export async function fetchAllRewardsState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<RewardsState>[]> {
  const maybeAccounts = await fetchAllMaybeRewardsState(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeRewardsState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<RewardsState>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeRewardsState(maybeAccount));
}
