/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/kit';
import { DEPHY_REWARDS_PROGRAM_ADDRESS } from '../programs';

/** InvalidAuthority: Invalid authority */
export const DEPHY_REWARDS_ERROR__INVALID_AUTHORITY = 0x1770; // 6000
/** InvalidProof: Invalid proof */
export const DEPHY_REWARDS_ERROR__INVALID_PROOF = 0x1771; // 6001
/** AlreadyClaimed: Already claimed */
export const DEPHY_REWARDS_ERROR__ALREADY_CLAIMED = 0x1772; // 6002

export type DephyRewardsError =
  | typeof DEPHY_REWARDS_ERROR__ALREADY_CLAIMED
  | typeof DEPHY_REWARDS_ERROR__INVALID_AUTHORITY
  | typeof DEPHY_REWARDS_ERROR__INVALID_PROOF;

let dephyRewardsErrorMessages: Record<DephyRewardsError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  dephyRewardsErrorMessages = {
    [DEPHY_REWARDS_ERROR__ALREADY_CLAIMED]: `Already claimed`,
    [DEPHY_REWARDS_ERROR__INVALID_AUTHORITY]: `Invalid authority`,
    [DEPHY_REWARDS_ERROR__INVALID_PROOF]: `Invalid proof`,
  };
}

export function getDephyRewardsErrorMessage(code: DephyRewardsError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (dephyRewardsErrorMessages as Record<DephyRewardsError, string>)[
      code
    ];
  }

  return 'Error message not available in production bundles.';
}

export function isDephyRewardsError<
  TProgramErrorCode extends DephyRewardsError,
>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    DEPHY_REWARDS_PROGRAM_ADDRESS,
    code
  );
}
